--- CMakeLists.txt.orig	2024-03-08 19:52:40.000000000 +0100
+++ CMakeLists.txt	2024-10-07 09:46:01.000000000 +0200
@@ -24,6 +24,25 @@
 
 message(STATUS "Shaderc: build type is \"${CMAKE_BUILD_TYPE}\".")
 
+if (GLSLANG_INSTALL_DIR)
+    message(STATUS "looking for external glslang")
+    set(USING_EXTERNAL_GLSLANG ON)
+    list(APPEND CMAKE_PREFIX_PATH ${GLSLANG_INSTALL_DIR})
+    set(CMAKE_REQUIRE_FIND_PACKAGE_glslang TRUE PARENT_SCOPE)
+endif()
+if (SPIRV_HEADERS_INSTALL_DIR)
+    message(STATUS "looking for external spirv headers")
+    set(USING_EXTERNAL_SPIRV_HEADERS ON)
+    list(APPEND CMAKE_PREFIX_PATH ${SPIRV_HEADERS_INSTALL_DIR})
+    set(CMAKE_REQUIRE_FIND_PACKAGE_SPIRV-Headers TRUE PARENT_SCOPE)
+endif()
+if (SPIRV_TOOLS_INSTALL_DIR)
+    message(STATUS "looking for external spirv-tools")
+    set(USING_EXTERNAL_SPIRV_TOOLS ON)
+    list(APPEND CMAKE_PREFIX_PATH ${SPIRV_TOOLS_INSTALL_DIR})
+    set(CMAKE_REQUIRE_FIND_PACKAGE_SPIRV-Tools TRUE PARENT_SCOPE)
+endif()
+
 option(SHADERC_ENABLE_WGSL_OUTPUT "Enable WGSL output" OFF)
 
 option(SHADERC_SKIP_INSTALL "Skip installation" ${SHADERC_SKIP_INSTALL})
--- third_party/CMakeLists.txt.orig	2024-03-08 19:52:40.000000000 +0100
+++ third_party/CMakeLists.txt	2024-10-07 12:08:04.000000000 +0200
@@ -77,17 +77,38 @@
     endif()
   endif()
   if (NOT TARGET SPIRV-Tools)
-    message(FATAL_ERROR "SPIRV-Tools was not found - required for compilation")
+    if (${USING_EXTERNAL_SPIRV_TOOLS})
+      #message(STATUS "using external SPIRV-Tools")
+      find_package(SPIRV-Tools-opt CONFIG)
+      if(NOT TARGET SPIRV-Tools-opt)
+        message(FATAL_ERROR "external SPIRV-Tools-opt not found")
+      else()
+        message(STATUS "external SPIRV-Tools-opt found")
+      endif()
+    else()
+      message(STATUS "not found SPIRV-Tools") 
+    endif()
+    #message(FATAL_ERROR "SPIRV-Tools was not found - required for compilation")
   endif()
 endif()
 
 if (NOT TARGET glslang)
   if (IS_DIRECTORY ${SHADERC_GLSLANG_DIR})
     add_subdirectory(${SHADERC_GLSLANG_DIR} glslang)
+  elseif (${USING_EXTERNAL_GLSLANG})
+    find_package(PkgConfig)
+    pkg_check_modules(GLSLANG REQUIRED glslang)
+    if (NOT ${GLSLANG})
+      message(FATAL_ERROR "external glslang not found")
+    else()
+      message(STATUS "using external glslang")
+    endif()
+  else()
+    message(STATUS "Not found external glslang")
   endif()
-  if (NOT TARGET glslang)
-    message(FATAL_ERROR "glslang was not found - required for compilation")
-  endif()
+  #if (NOT TARGET glslang)
+    #message(FATAL_ERROR "glslang was not found - required for compilation")
+  #endif()
   if(WIN32)
       # This is unfortunate but glslang forces our
       # platform toolset to be v110, which we may not even have
