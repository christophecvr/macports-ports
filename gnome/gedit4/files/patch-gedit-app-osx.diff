--- gedit/gedit-app-osx.m.orig	2024-09-14 07:18:34.000000000 +0200
+++ gedit/gedit-app-osx.m	2024-11-11 15:19:30.000000000 +0100
@@ -23,7 +23,6 @@
 #include "gedit-app-osx.h"
 
 #include <gdk/gdkquartz.h>
-#include <string.h>
 #include <glib/gi18n.h>
 
 #include "gedit-app-private.h"
@@ -42,6 +41,7 @@
 ensure_window (GeditAppOSX *app,
                gboolean     with_empty_document)
 {
+	g_message ("CVR DEBUG ensure_window is used");
 	GList *windows;
 	GeditWindow *ret = NULL;
 
@@ -106,54 +106,66 @@
 - (BOOL)applicationShouldHandleReopen:(NSApplication *)theApplication hasVisibleWindows:(BOOL)flag;
 - (void)applicationWillBecomeActive:(NSNotification *)aNotification;
 - (void)application:(NSApplication *)sender openFiles:(NSArray *)filenames;
+- (void)applicationDidFinishLaunching:(NSNotification *)aNotification;
 
 @end
 
 @implementation GeditAppOSXDelegate
 - (id)initWithApp:(GeditAppOSX *)theApp
 {
+	g_message ("CVR DEBUG - (id)initWithApp:(GeditAppOSX *)theApp is used");
 	[super init];
 	app = theApp;
 
 	orig = [NSApp delegate];
 	[NSApp setDelegate:self];
-
 	return self;
 }
 
 - (void)release
 {
+	g_message ("CVR DEBUG - (void)release is used");
 	[NSApp setDelegate:orig];
 	[super release];
 }
 
 - (id)forwardingTargetForSelector:(SEL)aSelector
 {
+	g_message ("CVR DEBUG - (id)forwardingTargetForSelector:(SEL)aSelector is used");
 	return orig;
 }
 
 - (BOOL)respondsToSelector:(SEL)aSelector
 {
+    g_message ("CVR DEBUG - (BOOL)respondsToSelector:(SEL)aSelector ise used");
     return [super respondsToSelector:aSelector] || [orig respondsToSelector:aSelector];
 }
 
 - (BOOL)applicationShouldHandleReopen:(NSApplication *)theApplication hasVisibleWindows:(BOOL)flag
 {
 	ensure_window (app, TRUE);
-	return NO;
+	g_message ("CVR DEBUG - (BOOL)applicationShouldHandleReopen:(NSApplication *)theApplication hasVisibleWindows:(BOOL)flag");
+	return true;
 }
 
 - (void)applicationWillBecomeActive:(NSNotification *)aNotification
 {
+	g_message ("CVR DEBUG - (void)applicationWillBecomeActive:(NSNotification *)aNotification is used");
 	ensure_window (app, TRUE);
 }
 
 - (void)application:(NSApplication *)sender openFiles:(NSArray *)filenames
 {
+	g_message ("CVR DEBUG - (void)application:(NSApplication *)sender openFiles:(NSArray *)filenames is used");
 	ensure_window (app, FALSE);
 	[orig application:sender openFiles:filenames];
 }
 
+- (void)applicationDidFinishLaunching:(NSNotification *)aNotification
+{
+	g_message ("CVR DEBUG - (void)applicationDidFinishLaunching:(NSNotification *)aNotification is used");
+	ensure_window (app, FALSE);
+}
 @end
 
 struct _GeditAppOSX
@@ -174,13 +186,13 @@
 static void
 remove_recent_actions (GeditAppOSX *app)
 {
+	g_message ("CVR DEBUG remove_recent_actions (GeditAppOSX *app) is used");
 	while (app->recent_actions)
 	{
 		gchar *action_name = app->recent_actions->data;
 
 		g_action_map_remove_action (G_ACTION_MAP (app), action_name);
 		g_free (action_name);
-
 		app->recent_actions = g_list_delete_link (app->recent_actions,
 		                                          app->recent_actions);
 	}
@@ -189,16 +201,26 @@
 static void
 gedit_app_osx_finalize (GObject *object)
 {
+	g_message ("CVR DEBUG gedit_app_osx_finalize (GObject *object) is used");
 	GeditAppOSX *app = GEDIT_APP_OSX (object);
-
-	g_object_unref (app->recent_files_menu);
+	
+	// only unref if object is not NULL
+	if (app->recent_files_menu != NULL)
+	{
+		g_object_unref (app->recent_files_menu);
+	}
 
 	remove_recent_actions (app);
 
-	g_signal_handler_disconnect (app->recent_config.manager,
-	                             app->recent_manager_changed_id);
+	// only applicable if instances are not NULL
+	if (app->recent_config.manager != NULL && app->recent_manager_changed_id == 0)
+	{
 
-	gedit_recent_configuration_destroy (&app->recent_config);
+		g_signal_handler_disconnect (app->recent_config.manager,
+	                             app->recent_manager_changed_id);
+	                             
+		gedit_recent_configuration_destroy (&app->recent_config);
+	}
 
 	[app->app_delegate release];
 
@@ -209,6 +231,7 @@
 gedit_app_osx_show_url (GeditAppOSX *app,
                         const gchar *url)
 {
+	g_message ("CVR DEBUG gedit_app_osx_show_url (GeditAppOSX *app,const gchar *url) is used");
 	return [[NSWorkspace sharedWorkspace] openURL:[NSURL URLWithString:[NSString stringWithUTF8String:url]]];
 }
 
@@ -218,6 +241,7 @@
                               const gchar *name,
                               const gchar *link_id)
 {
+	g_message ("CVR DEBUG gedit_app_osx_show_help_impl (GeditApp    *app,... is used");
 	gboolean ret = FALSE;
 
 	if (name == NULL || g_strcmp0 (name, "gedit") == 0)
@@ -246,6 +270,7 @@
                                      GeditWindow *window,
                                      const gchar *title)
 {
+	g_message ("CVR DEBUG gedit_app_osx_set_window_title_impl (GeditApp    *app, ... is used");
 	NSWindow *native;
 	GeditDocument *document;
 	GdkWindow *wnd;
@@ -309,6 +334,7 @@
 recent_file_info_free (gpointer  data,
                        GClosure *closure)
 {
+	g_message ("CVR DEBUG recent_file_info_free (gpointer  data,... is used");
 	RecentFileInfo *info = data;
 
 	g_object_unref (info->app);
@@ -322,6 +348,7 @@
                        GVariant       *parameter,
                        RecentFileInfo *info)
 {
+	g_message ("CVR DEBUG recent_file_activated (GAction        *action,... is used");
 	GeditWindow *window;
 	const gchar *uri;
 	GFile *file;
@@ -338,6 +365,7 @@
 static void
 recent_files_menu_populate (GeditAppOSX *app)
 {
+	g_message ("CVR DEBUG recent_files_menu_populate (GeditAppOSX *app) is used");
 	GList *items;
 	gint i = 0;
 
@@ -395,6 +423,7 @@
 recent_manager_changed (GtkRecentManager *manager,
                         GeditAppOSX      *app)
 {
+	g_message ("CVR DEBUG recent_manager_changed (GtkRecentManager *manager,... is used");
 	recent_files_menu_populate (app);
 }
 
@@ -403,6 +432,7 @@
                 GVariant      *parameter,
                 gpointer       userdata)
 {
+	g_message ("CVR DEBUG open_activated (GSimpleAction *action,... is used");
 	_gedit_cmd_file_open (NULL, NULL, NULL);
 }
 
@@ -413,11 +443,14 @@
 static void
 update_open_sensitivity (GeditAppOSX *app)
 {
+	g_message ("CVR DEBUG update_open_sensitivity (GeditAppOSX *app) is used");
 	GAction *action;
 	gboolean has_windows;
 
 	has_windows = (gtk_application_get_windows (GTK_APPLICATION (app)) != NULL);
 
+	g_message("CVR DEBUG update_open_sensitivity (GeditAppOSX *app) has_windows = %d", has_windows);
+
 	action = g_action_map_lookup_action (G_ACTION_MAP (app), "open");
 	g_simple_action_set_enabled (G_SIMPLE_ACTION (action), !has_windows);
 }
@@ -425,6 +458,7 @@
 static void
 gedit_app_osx_startup (GApplication *application)
 {
+	g_message ("CVR DEBUG gedit_app_osx_startup (GApplication *application) is used");
 	const gchar *replace_accels[] = {
 		"<Primary><Alt>F",
 		NULL
@@ -482,6 +516,7 @@
 static void
 set_window_allow_fullscreen (GeditWindow *window)
 {
+	g_message ("CVR DEBUG set_window_allow_fullscreen (GeditWindow *window) is used");
 	GdkWindow *wnd;
 	NSWindow *native;
 
@@ -497,23 +532,27 @@
 static void
 on_window_realized (GtkWidget *widget)
 {
+	g_message ("CVR DEBUG on_window_realized (GtkWidget *widget) is used");
 	set_window_allow_fullscreen (GEDIT_WINDOW (widget));
 }
 
 static GeditWindow *
 gedit_app_osx_create_window_impl (GeditApp *app)
 {
+	g_message ("CVR DEBUG gedit_app_osx_create_window_impl (GeditApp *app) is used");
 	GeditWindow *window;
 
 	window = GEDIT_APP_CLASS (gedit_app_osx_parent_class)->create_window (app);
 
 	if (gtk_widget_get_realized (GTK_WIDGET (window)))
 	{
+		g_message ("CVR DEBUG gedit_app_osx_create_window_impl (GeditApp *app) gtk_widget_get_realized (GTK_WIDGET (window)) =1");
 		set_window_allow_fullscreen (window);
 	}
 	else
 	{
 		g_signal_connect (window, "realize", G_CALLBACK (on_window_realized), NULL);
+		g_message ("CVR DEBUG gedit_app_osx_create_window_impl (GeditApp *app) gtk_widget_get_realized (GTK_WIDGET (window)) = 0 aft g_signal_connect");
 	}
 
 	return window;
@@ -524,6 +563,7 @@
                                          GeditWindow *window,
                                          GdkEvent    *event)
 {
+	g_message ("CVR DEBUG gedit_app_osx_process_window_event_impl (GeditApp    *app, NSEvent is used");
 	NSEvent *nsevent;
 
 	/* For OS X we will propagate the event to NSApp, which handles some OS X
@@ -543,6 +583,7 @@
 gedit_app_osx_constructed (GObject *object)
 {
 	/* FIXME: should we do this on all platforms? */
+	g_message ("CVR DEBUG gedit_app_osx_constructed (GObject *object) is used");
 	g_object_set (object, "register-session", TRUE, NULL);
 	G_OBJECT_CLASS (gedit_app_osx_parent_class)->constructed (object);
 }
@@ -551,6 +592,7 @@
 gedit_app_osx_window_added (GtkApplication *application,
                             GtkWindow      *window)
 {
+	g_message ("CVR DEBUG gedit_app_osx_window_added (GtkApplication *application,... is used");
 	GTK_APPLICATION_CLASS (gedit_app_osx_parent_class)->window_added (application, window);
 
 	update_open_sensitivity (GEDIT_APP_OSX (application));
@@ -560,6 +602,7 @@
 gedit_app_osx_window_removed (GtkApplication *application,
                               GtkWindow      *window)
 {
+	g_message ("CVR DEBUG gedit_app_osx_window_removed (GtkApplication *application,... is used");
 	GTK_APPLICATION_CLASS (gedit_app_osx_parent_class)->window_removed (application, window);
 
 	update_open_sensitivity (GEDIT_APP_OSX (application));
@@ -568,6 +611,7 @@
 static void
 gedit_app_osx_class_init (GeditAppOSXClass *klass)
 {
+	g_message ("CVR DEBUG gedit_app_osx_class_init (GeditAppOSXClass *klass) is used");
 	GObjectClass *object_class = G_OBJECT_CLASS (klass);
 	GeditAppClass *app_class = GEDIT_APP_CLASS (klass);
 	GApplicationClass *application_class = G_APPLICATION_CLASS (klass);
@@ -594,8 +638,128 @@
 	   command line arguments by itself and generate OpenFile events.
 	   We already parse the command line ourselves, so this is needed
 	   to prevent opening files twice, etc. */
-	[[NSUserDefaults standardUserDefaults] setObject:@"NO"
+	g_message ("CVR DEBUG gedit_app_osx_init (GeditAppOSX *app) is used");
+	[[NSUserDefaults standardUserDefaults] setObject:@"YES"
 	                                       forKey:@"NSTreatUnknownArgumentsAsOpen"];
+
+	//applicationDidFinishLaunching:(NSNotification *)aNotification;
 }
 
+/*
+ * gedit_app_osx_get_bundle_path:
+ *
+ * Return the root path of the bundle or the directory containing the
+ *  executable if it isn't actually a bundle.
+ *
+ * Returns: path The bundle's absolute path or %NULL on error. g_free() it when done.
+ */
+gchar*
+gedit_app_osx_get_bundle_path (void)
+{
+	g_message ("CVR DEBUG gedit_app_osx_get_bundle_path (void) is used");
+	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
+	gchar *str = NULL;
+	NSString *path = [[NSBundle mainBundle] bundlePath];
+	if (!path)
+		return NULL;
+	str = strdup ([path UTF8String]);
+	[pool release];
+	return str;
+}
+
+/*
+ * gedit_app_osx_get_bundle_id:
+ *
+ *Return the value of the CFBundleIdentifier key from the bundle's Info.plist
+ *
+ * This will return NULL if it's not really a bundle, there's no
+ * Info.plist, or if Info.plist doesn't have a CFBundleIdentifier key
+ * (So if you need to detect being in a bundle, make sure that your
+ * bundle has that key!)
+ *
+ * Returns: The string value of CFBundleIdentifier, or %NULL if there is none. g_free() it when done.
+ */
+gchar*
+gedit_app_osx_get_bundle_id (void)
+{
+	g_message ("CVR DEBUG gedit_app_osx_get_bundle_id (void) is used");
+	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
+	gchar *str = NULL;
+	NSString *path = [[NSBundle mainBundle] bundleIdentifier];
+	if (!path)
+		return NULL;
+	str = strdup ([path UTF8String]);
+	[pool release];
+	return str;
+}
+
+/*
+ * gedit_app_osx_get_resource_path:
+ *
+ * Return the Resource path for the bundle or the directory containing the
+ *  executable if it isn't actually a bundle. Use gtkosx_application_get_bundle_id() to check (it will return %NULL if it's not a bundle).
+ *
+ * Returns: path The absolute resource path. or %NULL on error. g_free() it when done.
+ */
+gchar*
+gedit_app_osx_get_resource_path (void)
+{
+	g_message ("CVR DEBUG gedit_app_osx_get_resource_path (void) is used");
+	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
+	gchar *str = NULL;
+	NSString *path = [[NSBundle mainBundle] resourcePath];
+	if (!path)
+		return NULL;
+	str = strdup ([path UTF8String]);
+	[pool release];
+	return str;
+}
+
+/*
+ * gedit_app_osx_get_executable_path:
+ *
+ * Return the executable path, including file name
+ *
+ * Returns: The path to the primary executable, or %NULL if it can't find one. g_free() it when done
+ */
+gchar*
+gedit_app_osx_get_executable_path (void)
+{
+	g_message ("CVR DEBUG gedit_app_osx_get_executable_path (void) is used");
+	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
+	gchar *str = NULL;
+	NSString *path = [[NSBundle mainBundle] executablePath];
+	if (!path)
+		return NULL;
+	str = strdup ([path UTF8String]);
+	[pool release];
+	return str;
+}
+
+/*
+ * gedit_app_osx_get_bundle_info:
+ * @key: The key, as a normal UTF8 string.
+ *
+ * Queries the bundle's Info.plist with key. If the returned object is
+ * a string, returns that; otherwise returns %NULL.
+ *
+ * Returns: A UTF8-encoded string. g_free() it when done.
+ */
+gchar*
+gedit_app_osx_get_bundle_info (const gchar *key)
+{
+	g_message ("CVR DEBUG gedit_app_osx_get_bundle_info (const gchar *key) is used");
+	gchar *result = NULL;
+	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
+	NSObject *id = [[NSBundle mainBundle] objectForInfoDictionaryKey:
+		[NSString stringWithUTF8String: key]];
+
+	if ([id respondsToSelector: @selector (UTF8String)])
+	{
+		result = g_strdup ([(NSString*)id UTF8String]);
+	}
+
+	[pool release];
+		return result;
+}
 /* ex:set ts=8 noet: */
--- gedit/gedit-app-osx.h.orig	2024-09-14 07:18:34.000000000 +0200
+++ gedit/gedit-app-osx.h	2024-11-10 09:08:41.000000000 +0100
@@ -23,6 +23,14 @@
 #ifndef GEDIT_APP_OSX_H
 #define GEDIT_APP_OSX_H
 
+#include <glib.h>
+#include <string.h>
+
+#ifndef G_LOG_DOMAIN
+#define G_LOG_DOMAIN "gedit"
+#endif
+
+#define DEBUG(format, ...)
 #include "gedit-app.h"
 
 G_BEGIN_DECLS
@@ -34,6 +42,12 @@
 gboolean	 gedit_app_osx_show_url			(GeditAppOSX *app,
 							 const gchar *url);
 
+gchar *gedit_app_osx_get_bundle_path(void);
+gchar *gedit_app_osx_get_bundle_id(void);
+gchar *gedit_app_osx_get_resource_path(void);
+gchar *gedit_app_osx_get_executable_path(void);
+gchar *gedit_app_osx_get_bundle_info(const gchar *key);
+
 G_END_DECLS
 
 #endif /* GEDIT_APP_OSX_H */
