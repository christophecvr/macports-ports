--- gio/giomodule.c.orig	2024-08-16 20:37:20.000000000 +0200
+++ gio/giomodule.c	2024-08-23 08:55:23.000000000 +0200
@@ -61,12 +61,13 @@
 #endif
 #include <glib/gstdio.h>
 
-#if defined(G_OS_UNIX) && !defined(__APPLE__)
+#if defined(G_OS_UNIX)
+#if !defined(HAVE_COCOA) || defined(USE_APPINFO_GENERIC)
 #include "gdesktopappinfo.h"
-#endif
-#ifdef HAVE_COCOA
+#elif defined(HAVE_COCOA)
 #include "gosxappinfo.h"
 #endif
+#endif
 
 #ifdef __APPLE__
 #include <AvailabilityMacros.h>
@@ -1184,7 +1185,7 @@
 
   if (g_once_init_enter (&registered_extensions))
     {
-#if defined(G_OS_UNIX) && !defined(__APPLE__)
+#if defined(G_OS_UNIX) && (!defined(HAVE_COCOA) || defined(USE_APPINFO_GENERIC))
 #if !GLIB_CHECK_VERSION (3, 0, 0)
       ep = g_io_extension_point_register (G_DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME);
       g_io_extension_point_set_required_type (ep, G_TYPE_DESKTOP_APP_INFO_LOOKUP);
@@ -1353,9 +1354,11 @@
 #endif
 #ifdef HAVE_COCOA
       g_type_ensure (g_nextstep_settings_backend_get_type ());
+#ifndef USE_APPINFO_GENERIC
       g_type_ensure (g_osx_app_info_get_type ());
       g_type_ensure (g_osx_network_monitor_get_type ());
 #endif
+#endif
 #ifdef G_OS_UNIX
       g_type_ensure (_g_unix_volume_monitor_get_type ());
       g_type_ensure (g_debug_controller_dbus_get_type ());
--- meson.options.orig	2024-08-25 05:09:59.000000000 +0200
+++ meson.options	2024-08-23 08:59:46.000000000 +0200
@@ -1,3 +1,9 @@
+option('appinfo_backend',
+       type : 'combo',
+       choices : ['generic', 'native'],
+       value : 'generic',
+       description : 'appinfo backend to use; either freedesktop (for x11 based builds) or native (for quartz based builds)')
+
 option('runtime_libdir',
        type : 'string',
        value : '',
--- gio/meson.build.orig	2024-08-16 20:37:20.000000000 +0200
+++ gio/meson.build	2024-08-25 06:35:05.000000000 +0200
@@ -390,17 +390,33 @@
     'gunixoutputstream.h',
   )
 
+  appinfo_backend = get_option('appinfo_backend')
   if glib_have_cocoa
     settings_sources += files('gnextstepsettingsbackend.m')
+    if appinfo_backend == 'native'
     contenttype_sources += files('gcontenttype-osx.m')
     unix_sources += files('gosxappinfo.m')
+    unix_sources += files('gosxnetworkmonitor.c')
+    application_headers += files('gosxappinfo.h')
+    else
+    contenttype_sources += files('gcontenttype-fdo.c')
+    unix_sources += files('gdesktopappinfo.c')
+    gio_unix_include_headers += files('gdesktopappinfo.h')
+    launch_desktop_sources = files('gio-launch-desktop.c')
+    gio_launch_desktop = executable('gio-launch-desktop', launch_desktop_sources,
+      include_directories : glibinc,
+      install : true,
+      install_dir : multiarch_libexecdir,
+      install_tag : 'bin',
+      c_args : gio_c_args,
+      # intl.lib is not compatible with SAFESEH
+      link_args : noseh_link_args)
+    endif    
     framework_dep = dependency('appleframeworks', modules : ['Foundation', 'CoreFoundation', 'AppKit'])
     platform_deps += [framework_dep]
     if glib_have_os_x_9_or_later
       unix_sources += files('gcocoanotificationbackend.m')
     endif
-    unix_sources += files('gosxnetworkmonitor.c')
-    application_headers += files('gosxappinfo.h')
   else
     contenttype_sources += files('gcontenttype-fdo.c')
     unix_sources += files('gdesktopappinfo.c')
@@ -834,6 +850,12 @@
   )
 endif
 
+if appinfo_backend == 'native'
+  glib_conf.set('USE_APPINFO_NATIVE', 1)
+else
+  glib_conf.set('USE_APPINFO_GENERIC', 1)
+endif
+
 if enable_dtrace
   gio_dtrace_obj = dtrace_obj_gen.process('gio_probes.d')
   gio_dtrace_hdr = dtrace_hdr_gen.process('gio_probes.d')
